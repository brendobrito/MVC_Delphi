unit Ind.Controller.Pedidos.DrawObjects;

interface

uses
  Ind.Controller.Interfaces, FMX.Types, System.Generics.Collections,
  FMX.Objects, FMX.StdCtrls;
type
  TControllerPedidosDrawObjects = class(TInterfacedObject, iControllerPedidosDrawObjects)
    private
      FParent : iControllerPedidos;
      FID : TLabel;
      FNomeCliente : TLabel;
      FHoraPedido : TLabel;
      FStatusLabel : TLabel;
      FStatusRectangle : TRectangle;
      FRectangleBase : TRectangle;
    public
      constructor Create(Parent : iControllerPedidos);
      destructor Destroy; override;
      class function New(Parent : iControllerPedidos) : iControllerPedidosDrawObjects;
      function id(value : integer) : iControllerPedidosDrawObjects;
      function nomeCliente(value : string) : iControllerPedidosDrawObjects;
      function horaPedido(value : string) : iControllerPedidosDrawObjects;
      function status(value : TPedidoStatus) : iControllerPedidosDrawObjects;
      function Free : iControllerPedidosDrawObjects;
      function &End : iControllerPedidos;
  end;

implementation

uses
  FMX.Forms, System.Classes, System.UITypes, System.SysUtils, System.Variants,
  FMX.Graphics;

{ TControllerPedidos }

function TControllerPedidosDrawObjects.&End: iControllerPedidos;
begin
  Result := FParent;
end;

function TControllerPedidosDrawObjects.horaPedido(
  value: string): iControllerPedidosDrawObjects;
begin
  Result := self;

  if not Assigned(FHoraPedido) then begin

    FHoraPedido := TLabel.Create(FRectangleBase);
    with FHoraPedido do
    begin
      Parent := FRectangleBase;
      Anchors := [TAnchorKind.akLeft, TAnchorKind.akTop];
      Position.X := 10;
      Position.Y := 25;
      Width := 50;
      StyledSettings := [TStyledSetting.Family, TStyledSetting.Style];
      TextSettings.Font.Size := 12;
      TextSettings.HorzAlign := TTextAlign.Leading;
      TextSettings.FontColor := $FF656565;
    end;
  end;

  FHoraPedido.Text := value;
end;

function TControllerPedidosDrawObjects.id(
  value: integer): iControllerPedidosDrawObjects;
begin
  Result := self;

  if not Assigned(FID) then begin

    FID := TLabel.Create(FRectangleBase);
    with FID do
    begin
      Parent := FRectangleBase;
      ClipParent := false;
      ClipChildren := false;
      Anchors := [TAnchorKind.akLeft, TAnchorKind.akTop];
      Position.X := 10;
      Position.Y := 6;
      Width := 50;
      StyledSettings := [TStyledSetting.Family, TStyledSetting.Style];
      TextSettings.Font.Size := 12;
      TextSettings.HorzAlign := TTextAlign.Leading;
      TextSettings.FontColor := $FF656565;
    end;
  end;

  FID.Text := FormatFloat('''#''0000', value);
end;

constructor TControllerPedidosDrawObjects.Create(Parent : iControllerPedidos);
begin
  FParent := Parent;

  if not Assigned(FRectangleBase) then begin

    FRectangleBase := TRectangle.Create(&End.Bind);
    with FRectangleBase do
    begin
      Parent := &End.Bind;
      Align := TAlignLayout.top;
      Fill.Color := $FFFFFFFF;
      Size.Width := 491;
      Size.Height := 50;
      Size.PlatformDefault := False;
      Stroke.Thickness := 0.2;
      Sides := [TSide.Bottom];
      Position.Y := 250000;
    end;
  end;
end;

destructor TControllerPedidosDrawObjects.Destroy;
begin
 { FreeAndNil(FID);
  FreeAndNil(FNomeCliente);
  FreeAndNil(FHoraPedido);
  FreeAndNil(FStatusLabel);
  FreeAndNil(FStatusRectangle);  }

  FreeAndNil(FRectangleBase);
  inherited;
end;

class function TControllerPedidosDrawObjects.New(Parent : iControllerPedidos): iControllerPedidosDrawObjects;
begin
  Result := Self.Create(Parent);
end;

function TControllerPedidosDrawObjects.nomeCliente(
  value: string): iControllerPedidosDrawObjects;
begin
  Result := self;

  if not Assigned(FNomeCliente) then begin

    FNomeCliente := TLabel.Create(FRectangleBase);
    with FNomeCliente do
    begin
      Parent := FRectangleBase;
      Anchors := [TAnchorKind.akLeft, TAnchorKind.akTop];
      Position.X := 60;
      Position.Y := 6;
      Width := 400;
      StyledSettings := [TStyledSetting.Family, TStyledSetting.Style,
      TStyledSetting.FontColor];
      TextSettings.Font.Size := 15;
      TextSettings.HorzAlign := TTextAlign.Leading;
    end;
  end;

  FNomeCliente.Text := value;
end;

function TControllerPedidosDrawObjects.Free: iControllerPedidosDrawObjects;
begin
  Result := self;
  FreeAndNil(FID);
  FreeAndNil(FNomeCliente);
  FreeAndNil(FHoraPedido);
  FreeAndNil(FStatusLabel);
  FreeAndNil(FStatusRectangle);
  FreeAndNil(FRectangleBase);
end;

function TControllerPedidosDrawObjects.status(
  value: TPedidoStatus): iControllerPedidosDrawObjects;
begin
  Result := self;

  if not Assigned(FStatusRectangle) then begin

    FStatusRectangle := TRectangle.Create(FRectangleBase);
    with FStatusRectangle do
    begin
      Parent := FRectangleBase;
      Position.X := INT(FRectangleBase.Width)-145;
      Position.Y := (INT(FRectangleBase.Height)-25)/2;
      Size.Width := 110;
      Size.Height := 25;
      Size.PlatformDefault := False;
      Stroke.Kind := TBrushKind.None;
      XRadius := 8.0;
      YRadius := 8.0;
    end;

   FStatusLabel := TLabel.Create(FRectangleBase);
   with FStatusLabel do
    begin
      Parent := FStatusRectangle;
      Align := TAlignLayout.Center;
      AutoSize := True;
      StyledSettings := [TStyledSetting.Family, TStyledSetting.Style];
      TextSettings.Font.Size := 12;
      TextSettings.HorzAlign := TTextAlign.Leading;
      TextSettings.FontColor := TAlphaColors.White;
      TextSettings.HorzAlign := TTextAlign.Center;
      WordWrap := false;
    end;
  end;

  FStatusRectangle.Fill.Color := &End.StatusGetColor(value);
  FStatusLabel.Text := &End.StatusGetString(value);
end;


end.
