unit Ind.Model.Conexoes.Firedac.Query;

interface

uses
  Data.DB, System.Classes, Firedac.Comp.Client,
  System.SysUtils, Ind.Model.DataSet.Proxy,
//  Ind.Model.Helper,
  Ind.Model.DataSet.Interfaces, Ind.Model.DataSet.Factory,
  Ind.Model.DataSet.Observer, System.Generics.Collections,
  Ind.Model.Conexoes.Interfaces, Firedac.Stan.Option;

Type

  TFiredacModelQuery = class(TInterfacedObject, iQuery)
  private
    FSQL: String;
    FKey: Integer;
    FConexao, FConexaoSecundaria: TFDConnection;
    // FDriver : iDriver;
    FQuery: TFDQuery;
    FDataSource: TDataSource;
    FDataSet: TDictionary<Integer, iDataSet>;
    FChangeDataSet: TChangeDataSet;
    FParams: TParams;

    procedure InstanciaQuery;
    function GetDataSet: iDataSet;
    function GetQuery: TFDQuery;
    procedure SetQuery(Value: TFDQuery);

  public
    constructor Create;
    destructor Destroy; override;
    class function New: iQuery;
    // iObserver
    procedure ApplyUpdates(DataSet: TDataSet);
    // iQuery
    function Open(aSQL: String): iQuery;
    function ExecSQL(aSQL: String): iQuery; overload;
    function DataSet: TDataSet; overload;
    function DataSet(Value: TDataSet): iQuery; overload;
    function DataSource(Value: TDataSource): iQuery;
    function Fields: TFields;
    function ChangeDataSet(Value: TChangeDataSet): iQuery;
    function &End: TComponent;
    function Tag(Value: Integer): iQuery;
    function LocalSQL(Value: TComponent): iQuery;
    function Close: iQuery;
    function SQL: TStrings;
    function Params: TParams;
    function ParamByName(Value: String): TParam;
    function Connection(Conexao: iModelConexao;
      ConexaoSecundaria: iModelConexao): iQuery;
    function ExecSQL: iQuery; overload;
    function UpdateTableName(Tabela: String): iQuery;
    function FieldByName(Value: string): TField;
    function FetchOptions: TFDFetchOptions;
  end;

implementation

uses
  Firedac.Stan.Param;

{ TFiredacModelQuery }

function TFiredacModelQuery.&End: TComponent;
begin
  Result := GetQuery;
end;

function TFiredacModelQuery.ExecSQL: iQuery;
begin
  Result := Self;
  if Assigned(FParams) then
    GetQuery.Params.Assign(FParams);
  GetQuery.ExecSQL;
  ApplyUpdates(nil);
end;

procedure TFiredacModelQuery.InstanciaQuery;
var
  Query: TFDQuery;
begin

  // if FConexao.ConnectionName = '' then
  // raise Exception.Create('teste false');
  // FConexao.ConnectionName := 'gfdfds';
  Query := TFDQuery.Create(nil);
  // Query.Connection := FConexao;
  Query.AfterPost := ApplyUpdates;
  Query.AfterDelete := ApplyUpdates;
  FQuery := Query;
end;

function TFiredacModelQuery.ExecSQL(aSQL: String): iQuery;
begin
  FSQL := aSQL;
  GetQuery.SQL.Text := FSQL;
  GetQuery.ExecSQL;
  ApplyUpdates(nil);
end;

function TFiredacModelQuery.Fields: TFields;
begin
  Result := GetQuery.Fields;
end;

function TFiredacModelQuery.FieldByName(Value: string): TField;
begin
  Result := GetQuery.FieldByName(Value);
end;

function TFiredacModelQuery.GetDataSet: iDataSet;
begin
  Result := FDataSet.Items[FKey];
end;

function TFiredacModelQuery.GetQuery: TFDQuery;
begin
  Result := FQuery;
end;

function TFiredacModelQuery.LocalSQL(Value: TComponent): iQuery;
begin
  Result := Self;
  GetQuery.LocalSQL := TFDCustomLocalSQL(Value);
end;

procedure TFiredacModelQuery.ApplyUpdates(DataSet: TDataSet);
begin

  GetQuery.SQL.Clear;
  // FDriver.Cache.ClearCache;
end;

function TFiredacModelQuery.ChangeDataSet(Value: TChangeDataSet): iQuery;
begin
  Result := Self;
  FChangeDataSet := Value;
end;

function TFiredacModelQuery.Close: iQuery;
begin
  Result := Self;
  GetQuery.Close;
end;

function TFiredacModelQuery.Connection(Conexao: iModelConexao;
  ConexaoSecundaria: iModelConexao): iQuery;
begin
  GetQuery.Connection := (Conexao.EndConexao as TFDConnection);
  FConexao := (Conexao.EndConexao as TFDConnection);
  FConexaoSecundaria := (ConexaoSecundaria.EndConexao as TFDConnection);
end;

constructor TFiredacModelQuery.Create;

begin
  FKey := 0;
  FQuery := TFDQuery.Create(nil);
  FDataSet := TDictionary<Integer, iDataSet>.Create;
  InstanciaQuery;

end;

function TFiredacModelQuery.FetchOptions: TFDFetchOptions;
begin
  Result := GetQuery.FetchOptions;
end;

function TFiredacModelQuery.DataSet: TDataSet;
begin
  Result := TDataSet(GetQuery);
end;

function TFiredacModelQuery.DataSet(Value: TDataSet): iQuery;
begin
  Result := Self;
  GetDataSet.DataSet(Value);
end;

function TFiredacModelQuery.DataSource(Value: TDataSource): iQuery;
begin
  Result := Self;
  FDataSource := Value;
end;

destructor TFiredacModelQuery.Destroy;
begin
  FreeAndNil(FQuery);
  FreeAndNil(FDataSet);
  inherited;
end;

class function TFiredacModelQuery.New: iQuery;
begin
  Result := Self.Create;
end;

function TFiredacModelQuery.Open(aSQL: String): iQuery;
var
  Query: TFDQuery;
  DataSet: iDataSet;
begin
  Result := Self;
  FSQL := aSQL;

  GetQuery.Close;

 // raise Exception.Create(GetQuery.Connection.DriverName);

  try

    GetQuery.Open(aSQL);

  except

    if GetQuery.Connection.DriverName = 'MySQL' then
      GetQuery.Connection := FConexaoSecundaria
    else
      GetQuery.Connection := FConexao;

    GetQuery.Close;
    GetQuery.Open(aSQL);

  end;


  //

{
  if not FDriver.Cache.CacheDataSet(FSQL, DataSet) then
  begin
  InstanciaQuery;
  //    DataSet(GetQuery);
  //DataSet.SQL(FSQL);
  GetQuery.Close;
  GetQuery.Open(aSQL);
  //    FDriver.Cache.AddCacheDataSet(DataSet.GUUID, DataSet);
  end
  else
  //    SetQuery(TFDQuery(DataSet.DataSet));
  //  FDataSource.DataSet := DataSet.DataSet; }
// Inc(FKey);
// FDataSet.Add(FKey, DataSet);
end;

function TFiredacModelQuery.ParamByName(Value: String): TParam;
begin
  Result := TParam(GetQuery.ParamByName(Value));
end;

function TFiredacModelQuery.Params: TParams;
begin
  if not Assigned(FParams) then
    FParams := TParams.Create(nil);

  FParams.Assign(GetQuery.Params);
  Result := FParams;
end;

procedure TFiredacModelQuery.SetQuery(Value: TFDQuery);
begin
  FQuery := Value;
end;

function TFiredacModelQuery.SQL: TStrings;
begin
  Result := GetQuery.SQL;
end;

function TFiredacModelQuery.Tag(Value: Integer): iQuery;
begin
  Result := Self;
  GetQuery.Tag := Value;
end;

function TFiredacModelQuery.UpdateTableName(Tabela: String): iQuery;
begin
  Result := Self;
end;

end.
